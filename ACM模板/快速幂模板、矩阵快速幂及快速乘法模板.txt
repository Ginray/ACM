/*矩阵快速幂真是非常nice
附上计算快速幂的方法

// m^n % k
int quickpow(int m,int n,int k)
{
    int b = 1;
    while (n > 0)
    {
          if (n & 1)
             b = (b*m)%k;
          n = n >> 1 ;
          m = (m*m)%k;
    }
    return b;
} 



*/


//快速乘法，基本思路和快速幂是一样的

#include <iostream> 
#include <cstdio> 
#include <cmath>  
#include <cstring>  

using namespace std;
 
long long q_mul( long long a, long long b, long long mod ) //快速计算 (a*b) % mod
{
    long long ans = 0;  // 初始化
    while(b)                //根据b的每一位看加不加当前a
    {
        if(b & 1)           //如果当前位为1
        {
            b--;
            ans =(ans+ a)%mod;   //ans+=a
        }
        b /= 2;                         //b向前移位
        a = (a + a) % mod;          //更新a
 
    }
    return ans;
}
 
 
int main( )
{
    long long a, b, n;
    while(cin >> a >> b >> n)
    {
        cout << "a*b%n = " << q_mul( a, b, n ) << endl;
    }
    return 0;
}






#include <stdio.h>  
 
#include <string.h>  



  
const int NN=32;  
  
typedef struct node{  
    int matrix[NN][NN];  
}Matrix;  
Matrix a,sa,unit;  
int n,m,k;  
  
Matrix Add(Matrix a,Matrix b)  //矩阵加法(%m)  
{  
    Matrix c;  
    for (int i=0; i<n; i++)  
      for (int j=0; j<n; j++)  
      {  
          c.matrix[i][j]=a.matrix[i][j]+b.matrix[i][j];  
          c.matrix[i][j]%=m;  
      }  
    return c;  
}  
  
Matrix Mul(Matrix a,Matrix b) //矩阵乘法(%m)  
{  
    Matrix c;  
    for (int i=0; i<n; i++)  
      for (int j=0; j<n; j++)  
      {  
          c.matrix[i][j]=0;  
          for (k=0; k<n; k++)  
             c.matrix[i][j]+=a.matrix[i][k]*b.matrix[k][j];  
          c.matrix[i][j]%=m;  
      }  
    return c;  
}  
  
Matrix Cal(int exp)  //矩阵快速幂  
{  
    Matrix p,q;  
    p=a;  
    q=unit;  
    while (exp!=1)  
    {  
        if (exp&1)  
        {  
            exp--;  
            q=Mul(p,q);  
        }  
        else  
        {  
            exp>>=1;  
            p=Mul(p,p);  
        }  
    }  
    return Mul(p,q);  
}  






  
int main()  
{  
    scanf("%d%d%d",&n,&k,&m);  
    for (int i=0; i<n; i++)  
       for (int j=0; j<n; j++)  
       {  
           scanf("%d",&a.matrix[i][j]);  
           a.matrix[i][j]%=m;  
           unit.matrix[i][j]=(i==j);  
       }  
    sa=Cal(k);  
    for (int i=0; i<n; i++)  
    {  
        for (int j=0; j<n; j++)  
             printf("%d ",sa.matrix[i][j]);  
        printf("\n");  
    }  
    return 0;  
}  
