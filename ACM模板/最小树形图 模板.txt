    #include <iostream>
    #include <vector>
    #include <cstdlib>
    #include <string>
    #include <cstring>
    #include<cmath>
    #include<cstdio>
    #define INF 2000000000
    #define MAXN 105
    #define MAXM 1005
    #define eps 1e-4
    using namespace std;
    typedef double type;
    struct Point
    {
        double x, y;
    }p[MAXN];
    struct node
    {
        int u, v;
        type w;
    }edge[MAXN * MAXN];
    int pre[MAXN], id[MAXN], vis[MAXN], n, m;
    type in[MAXN];
    double dis(Point a, Point b)
    {
        return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));
    }
    type Directed_MST(int root, int V, int E)
    {
        type ret = 0;
        while(true)
        {
            //1.找最小入边
            for(int i = 0; i < V; i++)
               in[i] = INF;
            for(int i = 0; i < E; i++)
            {
                int u = edge[i].u;
                int v = edge[i].v;
                if(edge[i].w < in[v] && u != v)
                  {pre[v] = u; in[v] = edge[i].w;}
            }
            for(int i = 0; i < V; i++)
            {
                if(i == root) continue;
                if(in[i] == INF) return -1;//除了根以外有点没有入边,则根无法到达它
            }
            //2.找环
            int cnt = 0;
            memset(id, -1, sizeof(id));
            memset(vis, -1, sizeof(vis));
            in[root] = 0;
            for(int i = 0; i < V; i++) //标记每个环
            {
                ret += in[i];
                int v = i;
                while(vis[v] != i && id[v] == -1 && v != root)  //每个点寻找其前序点，要么最终寻找至根部，要么找到一个环
                {
                    vis[v] = i;
                    v = pre[v];
                }
                if(v != root && id[v] == -1)//缩点
                {
                    for(int u = pre[v]; u != v; u = pre[u])
                        id[u] = cnt;
                    id[v] = cnt++;
                }
            }
            if(cnt == 0) break; //无环   则break
            for(int i = 0; i < V; i++)
                if(id[i] == -1) id[i] = cnt++;
            //3.建立新图
            for(int i = 0; i < E; i++)
            {
                int u = edge[i].u;
                int v = edge[i].v;
                edge[i].u = id[u];
                edge[i].v = id[v];
                if(id[u] != id[v]) edge[i].w -= in[v];
            }
            V = cnt;
            root = id[root];
        }
        return ret;
    }






    int main()
    {
        while(scanf("%d%d", &n, &m) != EOF)   //n  shi  dian  de zuo biao   m shi lian jie de bian
        {
            for(int i = 0; i < n; i++)
               scanf("%lf%lf", &p[i].x, &p[i].y);    // dian   de  zuo  biao
            for(int i = 0; i < m; i++)
            {
                scanf("%d%d", &edge[i].u, &edge[i].v);//  lian  tong de bian
                edge[i].u--;
                edge[i].v--;
                if(edge[i].u != edge[i].v) edge[i].w = dis(p[edge[i].u], p[edge[i].v]);
                else
                    edge[i].w = INF; //去除自环
            }
            type ans = Directed_MST(0, n, m);


            if(ans == -1)
                printf("can not find \n");
            else
                printf("%.2f\n", ans);
        }
        return 0;
    }

