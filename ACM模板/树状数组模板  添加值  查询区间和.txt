    /*求出任意一个子矩阵内的所有元素之和，即sum(x2, y2) - sum(x1-1, y2) - sum(x2, y1-1) + sum(x1-1, y1-1) */



    #include<stdio.h>
    #include<string.h>

    /*一维*/

    #define size 50005
int c[size],n;
int Lowbit(int k)
{
    return (k&-k);
}
void update(int pos,int num)     //pos   &&  data
{
    while(pos<=size)//注意这里
    {
        c[pos]+=num;
        pos+=Lowbit(pos);
    }
}
int sum(int pos)
{
    int s=0;

    while(pos>0)
    {
        s+=c[pos];
        pos-=Lowbit(pos);
    }
    return s;
}
int main()
{
    int i,j,s;
    int T;
     int ccase=1;
    scanf("%d",&T);
    while(T--)
    {
        int n;

        scanf("%d",&n);
        int x;

         memset(c,0,sizeof(c));

        for(x=1;x<=n;x++)
        {
            int fad;
            scanf("%d",&fad);    //注意怎么添加原始值
            update(x,fad);
        }

            printf("Case %d:\n",ccase++);

        while(1)
        {
            char f[10];
            scanf("%s",f);
            int a,b;
            if(f[0]=='A')   //增加值
            {
                scanf("%d%d",&a,&b);
                update(a,b);

            }
            else if(f[0]=='S') //减少值
            {
                scanf("%d%d",&a,&b);
                update(a,-b);

            }
            else if(f[0]=='Q')  //查询区间的和
            {

                scanf("%d%d",&a,&b);
                int ans=sum(b)-sum(a-1);
                printf("%d\n",ans);

            }
            else if(f[0]=='E')  //退出
                break;

        }



    }

    return 0;
}






    /*二维*/

    const int N=10000;
    int c[111][111];
    int lowbit(int x)
    {
        return x&(-x);
    }

    void modify(int x,int y,int delta )
    {
        int i, j;
        for(i=x;i<=N;i+=lowbit(i))
        {
            for(j=y; j<=N; j+=lowbit(j))
            {
                c[i][j] += delta;
            }
        }
    }

    int sum( int x, int y )
    {
        int res=0,i,j;
        for(i=x;i>0;i-=lowbit(i))
        {
            for(j=y; j>0; j-=lowbit(j))
            {
                res += c[i][j];
            }
        }
        return res;
    }


