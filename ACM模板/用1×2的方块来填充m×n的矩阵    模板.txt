//在这台电脑上开1000 ×1000的数组是会死机的！！！不要开！不要开！不要开！



#include<stdio.h>
#include<string.h>
#include<stdlib.h>
//n是行数
//m   所求的列数
int n,m,mod;// mod为取余的数
int  MatrixM  ;  //矩阵的大小     该数应该为1 <<m

#define LL long long
//#define m 4

void swap(int &x,int &y)
{
int flag;
flag=x;
x=y;
y=flag;
}

 struct mat
 {
    LL at[200][200 ];
 };

 mat dat;


 void dfs(int   l,int now ,int pre)   //i是列数  now是当前的行数。pre是上一行
 {
 if(l>m )return ;

  if(l==m  )
  {
  ++dat.at[pre][now];
  return ;
  }

    dfs(l+1,(now<<1)|1,(pre<<1));
    dfs(l+1,(now<<1),(pre<<1)|1);
    dfs(l+2,(now<<2)|3,(pre<<2)|3);

 }

 mat mul(mat a,mat b)  //矩阵相乘
{
    mat c;
    memset(c.at,0,sizeof(c.at));
    for(int i=0;i<MatrixM;++i)
    {
        for(int k=0;k<MatrixM;++k)
        {
            if(a.at[i][k])
            {
                for(int j=0;j<MatrixM;++j)
                {
                    c.at[i][j]+=a.at[i][k]*b.at[k][j];
                    if(c.at[i][j]>=mod){c.at[i][j]%=mod;}
                }
            }
        }
    }
    return c;
}
mat expo(mat a,int k)  //矩阵快速幂
{
    if(k==1)return a;
    mat e;
    memset(e.at,0,sizeof(e.at));
    for(int i=0;i<MatrixM;++i){e.at[i][i]=1;}
    if(k==0)return e;
    while(k)
    {
        if(k&1)e=mul(a,e);
        a=mul(a,a);
        k>>=1;
    }
    return e;
}


 int main()
 {

    while(~scanf("%d%d%d",&n,&m,&mod))//输入行数，列数，取余
    {
    if(m>n)
    swap(m,n);

      MatrixM =1<<m  ; //矩阵的大小     该数应该为1 <<m

     memset (dat.at,0,sizeof(dat.at));
     dfs(0,0,0);
      if(!n&&!mod)break;
          if(mod==1)
          {
          printf("0\n");
          continue;
          }
          mat ans=expo(dat,n);
        printf("%lld\n",ans.at[MatrixM-1][MatrixM-1]);
    }
    return 0;

 }



